Graph Graph with default constructor and Default add edge. It has 2 vertices and 1 edges
Vertex [2]
Vertex [3]
Edge [2] -> [3] weight [-1]
Insert some nodes into the graph
Graph Graph. It has 6 vertices and 8 edges
Vertex [1]
Vertex [2]
Vertex [3]
Vertex [4]
Vertex [7]
Vertex [9]
Edge [1] -> [2] weight [5]
Edge [1] -> [7] weight [3]
Edge [2] -> [3] weight [4.1]
Edge [2] -> [4] weight [0]
Edge [4] -> [2] weight [-1.4]
Edge [4] -> [4] weight [2.1]
Edge [4] -> [9] weight [-1.1]
Edge [7] -> [2] weight [3.4]
Verify some weights
Force some throws
Expected exception edge does not exist
Make sure we can remove some nodes
Graph Graph after removal. It has 5 vertices and 7 edges
Vertex [1]
Vertex [2]
Vertex [3]
Vertex [4]
Vertex [7]
Edge [1] -> [2] weight [5]
Edge [1] -> [7] weight [3]
Edge [2] -> [3] weight [4.1]
Edge [2] -> [4] weight [0]
Edge [4] -> [2] weight [-1.4]
Edge [4] -> [4] weight [2.1]
Edge [7] -> [2] weight [3.4]
Print the graph using using vertices and successors
Edge [1] -> [2] weight [5]
Edge [1] -> [7] weight [3]
Edge [2] -> [3] weight [4.1]
Edge [2] -> [4] weight [0]
Edge [4] -> [2] weight [-1.4]
Edge [4] -> [4] weight [2.1]
Edge [7] -> [2] weight [3.4]
Print the graph again using vertices and predecessors. Output is ordered by destination vertex
Edge [1] -> [2] weight [5]
Edge [4] -> [2] weight [-1.4]
Edge [7] -> [2] weight [3.4]
Edge [2] -> [3] weight [4.1]
Edge [2] -> [4] weight [0]
Edge [4] -> [4] weight [2.1]
Edge [1] -> [7] weight [3]

Try some of the complex operations 

Graph Transposed. It has 5 vertices and 7 edges
Vertex [1]
Vertex [2]
Vertex [3]
Vertex [4]
Vertex [7]
Edge [2] -> [1] weight [5]
Edge [2] -> [4] weight [-1.4]
Edge [2] -> [7] weight [3.4]
Edge [3] -> [2] weight [4.1]
Edge [4] -> [2] weight [0]
Edge [4] -> [4] weight [2.1]
Edge [7] -> [1] weight [3]
Graph transposed of transposed: equal to original. It has 5 vertices and 7 edges
Vertex [1]
Vertex [2]
Vertex [3]
Vertex [4]
Vertex [7]
Edge [1] -> [2] weight [5]
Edge [1] -> [7] weight [3]
Edge [2] -> [3] weight [4.1]
Edge [2] -> [4] weight [0]
Edge [4] -> [2] weight [-1.4]
Edge [4] -> [4] weight [2.1]
Edge [7] -> [2] weight [3.4]
Graph Inverted. It has 5 vertices and 18 edges
Vertex [1]
Vertex [2]
Vertex [3]
Vertex [4]
Vertex [7]
Edge [1] -> [1] weight [0]
Edge [1] -> [3] weight [0]
Edge [1] -> [4] weight [0]
Edge [2] -> [1] weight [0]
Edge [2] -> [2] weight [0]
Edge [2] -> [7] weight [0]
Edge [3] -> [1] weight [0]
Edge [3] -> [2] weight [0]
Edge [3] -> [3] weight [0]
Edge [3] -> [4] weight [0]
Edge [3] -> [7] weight [0]
Edge [4] -> [1] weight [0]
Edge [4] -> [3] weight [0]
Edge [4] -> [7] weight [0]
Edge [7] -> [1] weight [0]
Edge [7] -> [3] weight [0]
Edge [7] -> [4] weight [0]
Edge [7] -> [7] weight [0]
Graph Compute subgraph that includes only edges 1 2 3 and 5 (5 is not part of g). It has 3 vertices and 2 edges
Vertex [1]
Vertex [2]
Vertex [3]
Edge [1] -> [2] weight [5]
Edge [2] -> [3] weight [4.1]
Graph Subgraph empty. It has 0 vertices and 0 edges

Graph Try reachability of all vertices in g. First print graph: . It has 5 vertices and 7 edges
Vertex [1]
Vertex [2]
Vertex [3]
Vertex [4]
Vertex [7]
Edge [1] -> [2] weight [5]
Edge [1] -> [7] weight [3]
Edge [2] -> [3] weight [4.1]
Edge [2] -> [4] weight [0]
Edge [4] -> [2] weight [-1.4]
Edge [4] -> [4] weight [2.1]
Edge [7] -> [2] weight [3.4]

edge 1 1 false
edge 1 2 true
edge 1 3 true
edge 1 4 true
edge 1 7 true
edge 2 1 false
edge 2 2 true
edge 2 3 true
edge 2 4 true
edge 2 7 false
edge 3 1 false
edge 3 2 false
edge 3 3 false
edge 3 4 false
edge 3 7 false
edge 4 1 false
edge 4 2 true
edge 4 3 true
edge 4 4 true
edge 4 7 false
edge 7 1 false
edge 7 2 true
edge 7 3 true
edge 7 4 true
edge 7 7 false
